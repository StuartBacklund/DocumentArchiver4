using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Xml;
using DocumentArchiver.Pages;

namespace DocumentArchiver.Services
{
    public class ArticleCompiler
    {
        private StreamWriter sw;
        private XmlTextWriter toc;
        private DocumentSettings documentSetting;
        private DirectoryInfo workingDirectory { get; set; }
        public string ReturnMessage { get; set; }
        private char[] alphabetList = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".ToCharArray();
        private FileInfo[] files;

        public char[] AlphabetList
        {
            get { return alphabetList; }
        }

        public FileInfo[] Files
        {
            get { return files; }
            set { files = value; }
        }

        private string DefaultTopic
        {
            get
            {
                return string.Concat(documentSetting.DocumentName, ".Default.htm").Replace(" ", "");
            }
        }

        public bool IncludeFavorites { get; set; }

        public string ProjectName
        {
            get
            {
                return documentSetting.DocumentName.Replace(" ", "");
            }
        }

        public string DirectoryName
        {
            get
            {
                return documentSetting.InputFolder;
            }
        }

        public string HtmlHelpCompiler
        {
            get { return Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86) + @"\Html Help Workshop\hhc.exe"; }
        }

        public ArticleCompiler(DocumentSettings documentSetting)
        {
            this.documentSetting = documentSetting;
        }

        public void Setup()
        {
            var path = new DirectoryInfo(documentSetting.InputFolder);
            if (!path.Exists)
            {
                return;
            }
            files = path.GetFiles().Where(x => x.Extension == ".htm").OrderBy(n => n.Name).ToArray();

            this.OpenProjectFile();
            this.OpenContentsFile();
            this.OpenBookInContents();

            this.CreateHomePage();
            this.CreateIndexPage();
            this.CreateContentsPage();

            foreach (var letter in alphabetList.ToList())
            {
                var filegroup = new List<FileInfo>();
                foreach (var file in files.ToArray())
                {
                    if (file.Name.StartsWith(letter.ToString()))
                    {
                        filegroup.Add(file);
                    }
                }
                CreateHTMPage(letter.ToString(), filegroup.ToArray());
                CreateHTMPageDetails(letter.ToString(), filegroup.ToArray());
            }

            this.CloseProjectFile();
            this.CloseBookInContents();
            this.CloseContentsFile();
            this.WriteEmptyIndexFile();
        }

        private string ProjectFilename
        {
            get
            {
                return documentSetting.ProjectName + ".hhp";
            }
        }

        private string ContentsFilename
        {
            get
            {
                return documentSetting.ProjectName + ".hhc";
            }
        }

        private string IndexFilename
        {
            get
            {
                return documentSetting.ProjectName + ".hhk";
            }
        }

        private string LogFilename
        {
            get
            {
                return documentSetting.ProjectName + ".log";
            }
        }

        private string CompiledHtmlFilename
        {
            get
            {
                return documentSetting.ProjectName + ".chm";
            }
        }

        private string PathToProjectFile
        {
            get { return Path.Combine(documentSetting.InputFolder, ProjectFilename); }
        }

        private string PathToContentsFile
        {
            get { return Path.Combine(documentSetting.InputFolder, ContentsFilename); }
        }

        private string PathToIndexFile
        {
            get
            {
                return Path.Combine(documentSetting.InputFolder, IndexFilename);
            }
        }

        private string PathToLogFile
        {
            get
            {
                return Path.Combine(documentSetting.InputFolder, LogFilename);
            }
        }

        private string PathToCompiledHtmlFile
        {
            get { return Path.Combine(documentSetting.InputFolder, CompiledHtmlFilename); }
        }

        private string WorkingDirectory()
        {
            return Path.GetDirectoryName(Process.GetCurrentProcess().MainModule.FileName);
        }

        public void OpenProjectFile()
        {
            sw = new StreamWriter(File.Open(PathToProjectFile, FileMode.Create));

            string options;

            if (IncludeFavorites)
            {
                options = @"0x63520,220,0x383e,[86,51,872,558],,,,,,,0";
            }
            else
            {
                options = @"0x62520,220,0x383e,[86,51,872,558],,,,,,,0";
            }

            sw.WriteLine("[OPTIONS]");
            sw.WriteLine("Auto Index=Yes");
            sw.WriteLine("Title=" + documentSetting.DocumentName);
            sw.WriteLine("Compatibility=1.1 or later");
            sw.WriteLine("Compiled file=" + CompiledHtmlFilename);
            sw.WriteLine("Contents file=" + ContentsFilename);
            sw.WriteLine("Default Window=MsdnHelp");
            sw.WriteLine("Default topic=" + Path.GetFileName(DefaultTopic));
            sw.WriteLine("Display compile progress=No");
            sw.WriteLine("Error log file=" + this.LogFilename);
            sw.WriteLine("Full-text search=Yes");
            sw.WriteLine("Index file=" + IndexFilename);
            sw.WriteLine("Language=0x409 English (United States)");
            sw.WriteLine("");
            sw.WriteLine("[WINDOWS]");
            string outString1 = @"MsdnHelp=".PadRight(0) + '"';
            string outString2 = string.Concat(outString1, documentSetting.ProjectName, " Help".PadRight(0) + '"', ",", '"', ContentsFilename, '"', ",", '"', IndexFilename, '"', ",,,,,,,", options);
            sw.WriteLine(outString2);
            sw.WriteLine("");
            sw.WriteLine("[FILES]");
        }

        public void AddFileToProject(string filename)
        {
            sw.WriteLine(filename);
        }

        public void CloseProjectFile()
        {
            sw.WriteLine("");
            sw.WriteLine("[INFOTYPES]");
            sw.Close();
        }

        public void OpenContentsFile()
        {
            toc = new XmlTextWriter(PathToContentsFile, null);

            toc.WriteComment("This document contains Table of Contents information for the HtmlHelp compiler.");
            toc.WriteStartElement("UL");
        }

        public void OpenBookInContents()
        {
            toc.WriteStartElement("UL");
        }

        public void AddFileToContents(string headingName, string htmlFilename, int? ImageNumber = null)
        {
            toc.WriteStartElement("LI");
            toc.WriteStartElement("OBJECT");
            toc.WriteAttributeString("type", "text/sitemap");
            toc.WriteStartElement("param");
            toc.WriteAttributeString("name", "Name");
            toc.WriteAttributeString("value", headingName.Replace("$", "."));
            toc.WriteEndElement();
            toc.WriteStartElement("param");
            toc.WriteAttributeString("name", "Local");
            toc.WriteAttributeString("value", Path.GetFileName(htmlFilename));
            toc.WriteEndElement();

            if (ImageNumber.HasValue)
            {
                toc.WriteStartElement("param");
                toc.WriteAttributeString("name", "ImageNumber");
                toc.WriteAttributeString("value", ImageNumber.Value.ToString());
                toc.WriteEndElement();
            }

            toc.WriteEndElement();
            toc.WriteEndElement();
        }

        public void CloseBookInContents()
        {
            toc.WriteEndElement();
        }

        public void CloseContentsFile()
        {
            toc.WriteEndElement();
            toc.Close();
        }

        public void WriteEmptyIndexFile()
        {
            XmlTextWriter i = new XmlTextWriter(PathToIndexFile, null);

            i.WriteStartElement("HTML");
            i.WriteStartElement("BODY");
            i.WriteComment("");
            i.WriteEndElement();
            i.WriteEndElement();
            i.Close();
        }

        public int CompileProject()
        {
            string chmPath = PathToCompiledHtmlFile;
            if (File.Exists(chmPath))
            {
                File.Delete(chmPath);
            }
            Process helpCompileProcess = new Process();
            ProcessStartInfo processStartInfo = new ProcessStartInfo();
            processStartInfo.FileName = HtmlHelpCompiler;
            processStartInfo.Arguments = string.Concat('"', Path.GetFullPath(PathToProjectFile), '"');
            processStartInfo.ErrorDialog = false;
            processStartInfo.WorkingDirectory = Path.GetDirectoryName(Process.GetCurrentProcess().MainModule.FileName);
            processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            helpCompileProcess.StartInfo = processStartInfo;
            helpCompileProcess.Start();
            helpCompileProcess.WaitForExit();

            string msg = string.Format("The HTML Help compiler '{0}' was not found.", HtmlHelpCompiler);
            helpCompileProcess.Close();
            var postDirInfo = new DirectoryInfo(documentSetting.InputFolder);
            foreach (FileInfo oFile in postDirInfo.GetFiles())
            {
                string strValue = oFile.Name.ToUpper();

                if (strValue.Contains(documentSetting.DocumentName.Replace(" ", "").ToUpper()) & oFile.Extension == ".htm")
                {
                    if (File.Exists(oFile.FullName))
                    {
                        File.Delete(oFile.FullName);
                    }
                }
            }
            return 1;
        }

        public bool CopyFile(string source, string target)
        {
            try
            {
                if (File.Exists(target))
                {
                    File.Delete(target);
                }
                File.Copy(source, target, true);
                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public void CreateHTMPage(string sectionName, Array htPage)
        {
            CreateArticleSectionsPage hp = new CreateArticleSectionsPage();
            hp.DocumentSettings = documentSetting;

            string fileName = (documentSetting.DocumentName + "." + sectionName + ".htm").Replace(" ", "");
            string fullPath = BuildPageFilePath(fileName);
            hp.FileName = fileName;
            hp.OpenFile();
            hp.WriteHTML(sectionName, htPage);
            hp.CloseFile();
            this.AddFileToProject(fullPath);
            this.AddFileToContents(sectionName, fullPath);
        }

        public void CreateHTMPageDetails(string sectionName, Array ctPage)
        {
            foreach (FileInfo file in ctPage)
            {
                CreateArticlePageDetails hp = new CreateArticlePageDetails();
                hp.DocumentSettings = documentSetting;

                string fileName = (documentSetting.DocumentName + "." + sectionName + "." + file.Name).Replace(" ", "");
                string fullPath = BuildPageFilePath(fileName);
                hp.FileName = fileName;
                hp.OpenFile();
                hp.WriteHTML(file.Name, fullPath);
                hp.CloseFile();
                this.AddFileToProject(fullPath);
                this.OpenBookInContents();
                this.AddFileToContents(file.Name.Replace(".htm", ""), fileName, 11);
                this.CloseBookInContents();
            }
        }

        public void CreatePageSectionDetails(string character, List<FileInfo> filegroup)
        {
            CreateArticleSectionsPage hp = new CreateArticleSectionsPage();
            hp.DocumentSettings = documentSetting;

            foreach (var ch in alphabetList.ToList())
            {
                foreach (FileInfo file in filegroup.ToList())
                {
                    if (file.Name.Substring(0, 1) == ch.ToString())
                    {
                        var extractedFiles = filegroup.Where(x => x.Name.Substring(0, 1) == character);
                        hp.FilesInSection = extractedFiles.ToList<FileInfo>();

                        string fileName = string.Concat(documentSetting.DocumentName, ".", character, ".", file.Name).Replace(" ", "");
                        string fullPath = BuildPageFilePath(fileName);
                        hp.FileName = fileName;

                        hp.OpenFile();
                        hp.WriteHTML(character, extractedFiles.ToArray());
                        hp.CloseFile();
                        this.AddFileToProject(fullPath);
                        this.AddFileToContents(character.ToUpper(), fullPath);
                    }
                }
            }
        }

        public void CreateContentsPage()
        {
            ContentsPage hp = new ContentsPage();
            hp.DocumentSettings = documentSetting;
            hp.FilesInSection = files.ToList<FileInfo>();
            string fileName = BuildPageFileName(".Contents.htm");
            string fullPath = BuildPageFilePath(fileName);

            hp.FileName = fileName;

            hp.OpenFile();
            hp.WriteHTML(files);
            hp.CloseFile();
        }

        public void CreateIndexPage()
        {
            IndexPage hp = new IndexPage();
            hp.DocumentSettings = documentSetting;
            string fileName = BuildPageFileName(".Index.htm");
            string fullPath = BuildPageFilePath(fileName);
            hp.FileName = fileName;

            hp.OpenFile();
            hp.WriteHTML();
            hp.CloseFile();
        }

        public void CreateHomePage()
        {
            HomePage hp = new HomePage();
            hp.DocumentSettings = documentSetting;
            string fileName = BuildPageFileName(".Default.htm");
            string fullPath = BuildPageFilePath(fileName);
            hp.FileName = fileName;

            hp.OpenFile();

            hp.WriteHTML();
            hp.CloseFile();
            this.AddFileToProject(fullPath);
            this.AddFileToContents(documentSetting.DocumentName, fullPath);
        }

        private string BuildPageFileName(string pageName)
        {
            return string.Concat(documentSetting.DocumentName, pageName).Replace(" ", "");
        }

        private string BuildPageFilePath(string fileName)
        {
            return Path.Combine(documentSetting.InputFolder, fileName);
        }
    }
}